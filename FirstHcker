#include <iostream>

using namespace std;

struct node
{
    float data;
    unsigned int priority;//Допущу, что чем меньше приоритет, тем скорее элемент будет извлечен(Элемент с приротетом 1 будет извлекаться 1)
    node* next;
    node* previous;
};

class priority_stack
{
private:
    node* begin;//Начальный(первый элемент в стеке)

public:
    priority_stack()//Конструктор
    {
        begin = new node;//Создаю новый пустой узел(node). Этот узел становится начальным
        begin->previous = NULL;//Все указатели изначельно ни на что не указывают
        begin->next = NULL;
        begin->data = NULL;
    }

    void push(int prior, float key)
    {
        if(begin->data == NULL)//Если стек совсем пустой и в begin не лежит никакое число, то заполняю поля начального элемента
        {
            begin->data = key;
            begin->priority = prior;
            return;
        }

        node* p = new node;//В стеке есть минимум 1 элемент. Создается новы узел. Заполняются его узлы
        p->data = key;
        p->priority = prior;

        node* q = begin;//Указатель q указывает на начало. Он нужен затем, чтобы двигаться по стеку

        while(q->priority < p->priority)//Сравниваю приоритет элемента из стека с приоритетом вставляемого узла. если проиритет больше, то иду вглубь стека
        {
            if(q->next != NULL)//Осуществляется движение в глубину стека
            {
                q = q->next;//q теперь указывает на следующий элемент стека. Так мы сможем двигаться по стеку.
            }
            else//если мы в конце стека, то новый узел становится в конец стека
            {
                q->next = p;
                p->next = NULL;
                p->previous = q;
                return;
            }
        }

        if(q->previous == NULL)//Проверяю, не оказался ли новый узел в начале стека
        {
            begin = p;//Если да, до делаю его новым началом
            p->previous = NULL;
            p->next = q;
            q->previous = p;
            return;
        }

        //Если узел оказался где-то в середине стека
        q->previous->next = p;
        p->previous = q->previous;
        q->previous = p;
        p->next = q;
    }

    float pop()
    {
        node* p = begin;//Указатель p начинает указывать на 1 элемент стека

        float temp = p->data;//Во временной переменной будет лежать значение 1 элемента стека

        if(p->next != NULL)//Проверяю, не состоит ли стек из 1 элемента
        {
            begin = p->next;//Начальным элементом становится 2 элемент стека
            begin->previous = NULL;//2 элемент стека перестает указывать на 1
            delete p;//Высвобождаем память

            return temp;//Возвращаем значение
        }

        p->data = NULL;//Если стек состоит из 1 элемента, то узел не удаляется. Только поле data становится пустым
        return temp;//Возвращаем значение
    }


    void print()//Функция  вывода стека на экран(необязательна)
    {
        node* p = begin;//Указатель p начинает указывать на 1 элемент стека

        do
        {
            if(p->next == NULL)//Если находимся в конце стэка
            {
                cout << "[" << p->data << "]" << endl;
                p = p->next;//указатель p становится равным NULL(так как находились в конце стека), и цикл завершается
            }
            else//Если находимся в середине или начале
            {
                cout << "[" << p->data << "] -> ";
                p = p->next;//указатeль p начинает указывать на следущий элемент стека
            }
        }
        while(p != NULL);//Если p = NULL(прошли весь стек) то цикл завершается
    }

    ~priority_stack()
    {
        node* p = begin;

        while(p->next != NULL)
        {
            p = p->next;
            node* q = p->previous;
            delete q;
        }
        delete p;
    }

};

int main()
{
    priority_stack A;//Создаем обьект класса
    A.push(1,2.0);//Тест функционала
    A.push(1,5.0);
    A.push(1,6.0);
    A.push(2,7.0);
    A.print();
    A.pop();
    A.pop();
    A.print();
    return 0;
}
